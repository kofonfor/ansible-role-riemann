; -*- mode: clojure; -*-
; vim: filetype=clojure

(logging/init {:file "/var/log/riemann/riemann.log"})

(require '[riemann.email :refer [mailer]]
         '[riemann.telegram :refer [telegram]])

(def graph (graphite {:host "{{ riemann_graphite_host }}"}))
(def email (mailer {:from "{{ riemann_from_email }}"}))
(def tg-token "{{ riemann_telegram_token }}") (def tg-chat-id "{{ riemann_telegram_chat_id }}")

; Listen on the local interface over TCP (5555), UDP (5555), and websockets
; (5556)
(let [host "0.0.0.0" graphite-port {{ riemann_graphite_port }}]
  (tcp-server {:host host})
  (udp-server {:host host})
  (graphite-server {:host host :port graphite-port})
  (ws-server  {:host host}))

; Expire old events from the index every 5 seconds.
(periodically-expire 5)

(let [[index alert] [(index) (email "{{ riemann_alerts_email }}")]]
  ; Inbound events will be passed to these streams:
  (streams
    (default :ttl 60
      ; Index all events immediately.
      index
      graph

{% for host in groups["all"] %}
      (where (and (service #"^{{ collectd_prefix }}\.{{ hostvars[host].ansible_fqdn | regex_replace('\.', '_') }}\.cpu-(\d*)\.percent-user") (> metric {{ riemann_cpu_percent_user_threshold }}))
        (throttle 1 600 (telegram {:token tg-token :telegram-options {:chat_id tg-chat-id :parse_mode "HTML"}}))
        #(info "User CPU% is too high! " %))
      (where (and (service #"^{{ collectd_prefix }}\.{{ hostvars[host].ansible_fqdn | regex_replace('\.', '_') }}\.disk-sd.\.disk_io_time\.io_time") (> metric {{ riemann_disk_io_time_threshold }}))
        (throttle 1 600 (telegram {:token tg-token :telegram-options {:chat_id tg-chat-id :parse_mode "HTML"}}))
        #(info "Disk util% is too high! " %))
{% endfor %}

      ; Log expired events.
      (expired
        (fn [event] (info "expired" event))))))

